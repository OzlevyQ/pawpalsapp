import React, { createContext, useContext, useState, useEffect } from 'react';
import { I18nManager } from 'react-native';
import * as SecureStore from 'expo-secure-store';

export type Language = 'en' | 'he';
export type TextDirection = 'ltr' | 'rtl';

interface Translations {
  // Common
  cancel: string;
  ok: string;
  save: string;
  delete: string;
  edit: string;
  back: string;
  loading: string;
  error: string;
  success: string;
  
  // Profile Screen
  profile: string;
  welcome: string;
  guest: string;
  continueAsGuest: string;
  loginToAccount: string;
  createNewAccount: string;
  joinPawPalsCommunity: string;
  settings: string;
  darkMode: string;
  notifications: string;
  language: string;
  helpAndSupport: string;
  myDogs: string;
  addNewDog: string;
  addYourFaithfulFriend: string;
  dogName: string;
  breed: string;
  age: string;
  weight: string;
  size: string;
  gender: string;
  male: string;
  female: string;
  small: string;
  medium: string;
  large: string;
  personality: string;
  friendly: string;
  energetic: string;
  social: string;
  aggressive: string;
  description: string;
  vaccinated: string;
  medicalInfo: string;
  addDog: string;
  addPhoto: string;
  basicInformation: string;
  characteristics: string;
  activity: string;
  myBadges: string;
  badgesEarned: string;
  myStatistics: string;
  viewYourData: string;
  visitLog: string;
  visitHistory: string;
  points: string;
  level: string;
  streak: string;
  
  // Auth Screens
  loginTitle: string;
  welcomeBack: string;
  emailAddress: string;
  enterEmail: string;
  password: string;
  enterPassword: string;
  forgotPassword: string;
  login: string;
  or: string;
  continueWithGoogle: string;
  noAccount: string;
  signUpNow: string;
  registerTitle: string;
  joinCommunity: string;
  firstName: string;
  lastName: string;
  confirmPassword: string;
  createAccount: string;
  signUpWithGoogle: string;
  alreadyHaveAccount: string;
  loginText: string;
  termsAgreement: string;
  
  // Home Screen
  hello: string;
  helloGuest: string;
  discoverParks: string;
  howCanWeHelpToday: string;
  signUpNow2: string;
  getAccessToAllFeatures: string;
  whatCanYouDo: string;
  findParks: string;
  discoverDogParks: string;
  parkInfo: string;
  hoursAndFacilities: string;
  popularParks: string;
  openNow: string;
  dailyMissions: string;
  visitDogPark: string;
  completed: string;
  quickActions: string;
  quickCheckIn: string;
  scanQrInPark: string;
  nearbyParks: string;
  findParksNearby: string;
  
  // Language Selection
  selectLanguage: string;
  english: string;
  hebrew: string;
  languageChanged: string;
  
  // Parks Screen
  dogParks: string;
  searchParks: string;
  all: string;
  nearMe: string;
  openNow: string;
  highRating: string;
  loading: string;
  loadingParks: string;
  checkIn: string;
  navigate: string;
  public: string;
  private: string;
  km: string;
  signUpForCheckinAndMore: string;
  noParkAvailable: string;
  reviews: string;
  
  // Social Screen
  social: string;
  joinCommunity: string;
  connectWithDogOwners: string;
  signUpForSocialFeatures: string;
  activeFriends: string;
  recentChats: string;
  friend: string;
  dogOwner: string;
  community: string;
  sharePhoto: string;
  uploadDogPhoto: string;
  rateDogs: string;
  rateDogsYouMet: string;
  dogDiary: string;
  recordMeetingsAndExperiences: string;
  registrationRequired: string;
  signUpForSocial: string;
  hours: string;
  howIsYourDog: string;
  
  // Events Screen
  events: string;
  discoverExcitingEvents: string;
  joinEventsAndMeetOthers: string;
  filterEvents: string;
  upcoming: string;
  myEvents: string;
  participants: string;
  organized: string;
  availableEvents: string;
  eventIsFull: string;
  signUpToEvent: string;
  joinNow: string;
  date: string;
  location: string;
  time: string;
  organizer: string;
  participationLevel: string;
  full: string;
  available: string;
  signUpForEvents: string;
  
  // Tab Navigation
  homeTab: string;
  parksTab: string;
  socialTab: string;
  eventsTab: string;
  profileTab: string;
  
  // Garden Details
  details: string;
  address: string;
  hoursToday: string;
  facilities: string;
  parking: string;
  water: string;
  shade: string;
  lighting: string;
  fencing: string;
  wasteDisposal: string;
  seating: string;
  agilityEquipment: string;
  currentVisitors: string;
  dogsCurrentlyActive: string;
  hoursNotAvailable: string;
  addressNotAvailable: string;
  closedToday: string;
  
  // Status
  openNowStatus: string;
  closedNowStatus: string;
  unknown: string;
  
  // Notifications
  notifications: string;
  newMessages: string;
  markAllAsRead: string;
  viewAll: string;
  noNotifications: string;
  allNotificationsWillAppearHere: string;
  goToFullNotificationsPage: string;
  ago: string;
  newEvent: string;
  newFriend: string;
  newAchievement: string;
  reminder: string;
  
  // Navigation
  selectNavigationApp: string;
  openWith: string;
  appleMaps: string;
  googleMaps: string;
  waze: string;
  navigationNotAvailable: string;
  errorOpeningNavigation: string;
  installNavigationApp: string;
  noNavigationAppsFound: string;
  openInBrowser: string;

  // QR Scanner
  scanQR: string;
  scanQrToCheckin: string;
  scanning: string;
  scanQrInPark: string;
  quickCheckin: string;
  positionQrWithinFrame: string;
  qrScanAutomatically: string;
  manualCheckin: string;
  cameraPermissionRequired: string;
  cameraPermissionMessage: string;
  grantPermission: string;
  goBack: string;
  processing: string;
  invalidQrCode: string;
  invalidQrMessage: string;
  scanAgain: string;
  checkinSuccessful: string;
}

const translations: Record<Language, Translations> = {
  en: {
    // Common
    cancel: 'Cancel',
    ok: 'OK',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    back: 'Back',
    loading: 'Loading...',
    error: 'Error',
    success: 'Success',
    
    // Profile Screen
    profile: 'Profile',
    welcome: 'Welcome!',
    guest: 'Guest',
    continueAsGuest: 'Continue as Guest üë§',
    loginToAccount: 'Login to Account ‚ú®',
    createNewAccount: 'Create New Account',
    joinPawPalsCommunity: 'Join PawPals Community',
    settings: '‚öôÔ∏è Settings',
    darkMode: 'Dark Mode',
    notifications: 'Notifications',
    language: 'Language',
    helpAndSupport: 'Help & Support',
    myDogs: 'üêï My Dogs',
    addNewDog: 'Add New Dog',
    addYourFaithfulFriend: 'Add your faithful friend',
    dogName: 'Dog Name',
    breed: 'Breed',
    age: 'Age',
    weight: 'Weight',
    size: 'Size',
    gender: 'Gender',
    male: 'Male',
    female: 'Female',
    small: 'Small',
    medium: 'Medium',
    large: 'Large',
    personality: 'Personality',
    friendly: 'Friendly',
    energetic: 'Energetic',
    social: 'Social',
    aggressive: 'Aggressive',
    description: 'Description',
    vaccinated: 'Vaccinated',
    medicalInfo: 'Medical Information',
    addDog: 'Add Dog',
    addPhoto: 'Add Photo',
    basicInformation: 'Basic Information',
    characteristics: 'Characteristics',
    activity: 'üìä Activity',
    myBadges: 'My Badges',
    badgesEarned: '5 badges earned',
    myStatistics: 'My Statistics',
    viewYourData: 'View your data',
    visitLog: 'Visit Log',
    visitHistory: 'Visit history',
    points: 'Points',
    level: 'Level',
    streak: 'Streak',
    
    // Auth Screens
    loginTitle: 'Login to Account',
    welcomeBack: 'Welcome back! We\'re happy to see you again',
    emailAddress: 'Email Address',
    enterEmail: 'Enter email address',
    password: 'Password',
    enterPassword: 'Enter password',
    forgotPassword: 'Forgot Password?',
    login: 'Login',
    or: 'or',
    continueWithGoogle: 'Continue with Google',
    noAccount: 'Don\'t have an account? ',
    signUpNow: 'Sign up now',
    registerTitle: 'Create New Account',
    joinCommunity: 'Join our dog owners community',
    firstName: 'First Name',
    lastName: 'Last Name',
    confirmPassword: 'Confirm Password',
    createAccount: 'Create Account',
    signUpWithGoogle: 'Sign up with Google',
    alreadyHaveAccount: 'Already have an account? ',
    loginText: 'Login',
    termsAgreement: 'By signing up you agree to our Terms of Service and Privacy Policy',
    
    // Home Screen
    hello: 'Hello',
    helloGuest: 'Hello Guest! üëã',
    discoverParks: 'Discover dog parks around you',
    howCanWeHelpToday: 'How can we help you today?',
    signUpNow2: 'Sign up now!',
    getAccessToAllFeatures: 'Get access to all features: check-in at parks, friends, events and more',
    whatCanYouDo: 'What can you do?',
    findParks: 'Find Parks',
    discoverDogParks: 'Discover dog parks nearby',
    parkInfo: 'Park Info',
    hoursAndFacilities: 'Opening hours and facilities',
    popularParks: 'Popular Parks',
    openNow: 'Open now',
    dailyMissions: 'Daily Missions ‚≠ê',
    visitDogPark: 'Visit a dog park',
    completed: 'completed',
    quickActions: 'Quick Actions',
    quickCheckIn: 'Quick Check-in',
    scanQrInPark: 'Scan QR at park',
    nearbyParks: 'Nearby Parks',
    findParksNearby: 'Find parks nearby',
    
    // Language Selection
    selectLanguage: 'Select Language',
    english: 'English üá∫üá∏',
    hebrew: '◊¢◊ë◊®◊ô◊™ üáÆüá±',
    languageChanged: 'Language changed successfully',
    
    // Parks Screen
    dogParks: 'Dog Parks',
    searchParks: 'Search dog parks...',
    all: 'All',
    nearMe: 'Near Me',
    openNow: 'Open Now',
    highRating: 'High Rating',
    loadingParks: 'Loading parks...',
    checkIn: 'Check-in',
    navigate: 'Navigate',
    public: 'Public',
    private: 'Private',
    km: 'km',
    signUpForCheckinAndMore: 'Sign up for check-in and more features',
    noParkAvailable: 'No dog parks available at the moment',
    reviews: 'reviews',
    
    // Social Screen
    social: 'Social',
    joinCommunity: 'Join the Community',
    connectWithDogOwners: 'Connect with other dog owners, share experiences and make new friends',
    signUpForSocialFeatures: 'To access social features, please sign up or login to your account',
    activeFriends: 'Active Friends',
    recentChats: 'Recent Chats',
    friend: 'Friend',
    dogOwner: 'Dog Owner',
    community: 'Community',
    sharePhoto: 'Share Photo',
    uploadDogPhoto: 'Upload a photo of your dog',
    rateDogs: 'Rate Dogs',
    rateDogsYouMet: 'Rate dogs you met at the park',
    dogDiary: 'Dog Diary',
    recordMeetingsAndExperiences: 'Record meetings and experiences',
    registrationRequired: 'Registration Required',
    signUpForSocial: 'Sign Up Now',
    hours: 'h',
    howIsYourDog: 'Hey! How is your dog?',
    
    // Events Screen
    events: 'Events',
    discoverExcitingEvents: 'Discover Exciting Events',
    joinEventsAndMeetOthers: 'Join events, meet other dog owners and create unforgettable experiences',
    filterEvents: 'Filter Events',
    upcoming: 'Upcoming',
    myEvents: 'My Events',
    participants: 'Participants',
    organized: 'Organized',
    availableEvents: 'Available Events',
    eventIsFull: 'Event is Full',
    signUpToEvent: 'Sign Up to Event',
    joinNow: 'Join Now',
    date: 'Date',
    location: 'Location',
    time: 'Time',
    organizer: 'Organizer',
    participationLevel: 'Participation Level',
    full: 'Full',
    available: 'Available',
    signUpForEvents: 'To sign up for events, please sign up or login to your account',
    
    // Tab Navigation
    homeTab: 'Home',
    parksTab: 'Parks',
    socialTab: 'Social',
    eventsTab: 'Events',
    profileTab: 'Profile',
    
    // Garden Details
    details: 'Details',
    address: 'Address',
    hoursToday: 'Hours today',
    facilities: 'Facilities',
    parking: 'Parking',
    water: 'Water',
    shade: 'Shade',
    lighting: 'Lighting',
    fencing: 'Fencing',
    wasteDisposal: 'Waste Disposal',
    seating: 'Seating',
    agilityEquipment: 'Agility Equipment',
    currentVisitors: 'Current Visitors',
    dogsCurrentlyActive: 'dogs currently active in the park',
    hoursNotAvailable: 'Hours not available',
    addressNotAvailable: 'Address not available',
    closedToday: 'Closed today',
    
    // Status
    openNowStatus: 'Open now',
    closedNowStatus: 'Closed now',
    unknown: 'Unknown',
    
    // Notifications
    notifications: 'Notifications',
    newMessages: 'new messages',
    markAllAsRead: 'Mark all as read',
    viewAll: 'View all',
    noNotifications: 'No notifications',
    allNotificationsWillAppearHere: 'All your notifications will appear here',
    goToFullNotificationsPage: 'Go to full notifications page',
    ago: 'ago',
    newEvent: 'New event in park',
    newFriend: 'New friend',
    newAchievement: 'New achievement! üèÜ',
    reminder: 'Reminder: Vet checkup',
    
    // Navigation
    selectNavigationApp: 'Select Navigation App',
    openWith: 'Choose your preferred navigation app',
    appleMaps: 'Apple Maps',
    googleMaps: 'Google Maps',
    waze: 'Waze',
    navigationNotAvailable: 'Navigation Not Available',
    errorOpeningNavigation: 'Could not open navigation app. Please try again.',
    installNavigationApp: 'Install Navigation App',
    noNavigationAppsFound: 'No navigation apps found on your device',
    openInBrowser: 'Open in Browser',

    // QR Scanner
    scanQR: 'Scan QR',
    scanQrToCheckin: 'Scan QR to check-in',
    scanning: 'Scanning...',
    scanQrInPark: 'Scan QR at park',
    quickCheckin: 'Quick Check-in',
    positionQrWithinFrame: 'Position QR code within the frame',
    qrScanAutomatically: 'The code will scan automatically',
    manualCheckin: 'Manual Check-in',
    cameraPermissionRequired: 'Camera Permission Required',
    cameraPermissionMessage: 'To scan QR codes, we need access to your camera',
    grantPermission: 'Grant Permission',
    goBack: 'Go Back',
    processing: 'Processing...',
    invalidQrCode: 'Invalid QR Code',
    invalidQrMessage: 'This QR code is not valid for a dog park',
    scanAgain: 'Scan Again',
    checkinSuccessful: 'Check-in successful!',
  },
  he: {
    // Common
    cancel: '◊ë◊ô◊ò◊ï◊ú',
    ok: '◊ê◊ï◊ß◊ô◊ô',
    save: '◊©◊û◊ô◊®◊î',
    delete: '◊û◊ó◊ô◊ß◊î',
    edit: '◊¢◊®◊ô◊õ◊î',
    back: '◊ó◊ñ◊®◊î',
    loading: '◊ò◊ï◊¢◊ü...',
    error: '◊©◊í◊ô◊ê◊î',
    success: '◊î◊¶◊ú◊ó◊î',
    
    // Profile Screen
    profile: '◊§◊®◊ï◊§◊ô◊ú',
    welcome: '◊ë◊®◊ï◊ö ◊î◊ë◊ê!',
    guest: '◊ê◊ï◊®◊ó',
    continueAsGuest: '◊î◊û◊©◊ö ◊õ◊ê◊ï◊®◊ó üë§',
    loginToAccount: '◊î◊™◊ó◊ë◊® ◊ú◊ó◊©◊ë◊ï◊ü ‚ú®',
    createNewAccount: '◊¶◊ï◊® ◊ó◊©◊ë◊ï◊ü ◊ó◊ì◊©',
    joinPawPalsCommunity: '◊î◊¶◊ò◊®◊£ ◊ú◊ß◊î◊ô◊ú◊™ PawPals',
    settings: '‚öôÔ∏è ◊î◊í◊ì◊®◊ï◊™',
    darkMode: '◊û◊¶◊ë ◊õ◊î◊î',
    notifications: '◊î◊™◊®◊ê◊ï◊™',
    language: '◊©◊§◊î',
    helpAndSupport: '◊¢◊ñ◊®◊î ◊ï◊™◊û◊ô◊õ◊î',
    myDogs: 'üêï ◊î◊õ◊ú◊ë◊ô◊ù ◊©◊ú◊ô',
    addNewDog: '◊î◊ï◊°◊£ ◊õ◊ú◊ë ◊ó◊ì◊©',
    addYourFaithfulFriend: '◊î◊ï◊°◊£ ◊ê◊™ ◊î◊ó◊ë◊® ◊î◊†◊ê◊û◊ü ◊©◊ú◊ö',
    dogName: '◊©◊ù ◊î◊õ◊ú◊ë',
    breed: '◊í◊ñ◊¢',
    age: '◊í◊ô◊ú',
    weight: '◊û◊©◊ß◊ú',
    size: '◊í◊ï◊ì◊ú',
    gender: '◊û◊ô◊ü',
    male: '◊ñ◊õ◊®',
    female: '◊†◊ß◊ë◊î',
    small: '◊ß◊ò◊ü',
    medium: '◊ë◊ô◊†◊ï◊†◊ô',
    large: '◊í◊ì◊ï◊ú',
    personality: '◊ê◊ô◊©◊ô◊ï◊™',
    friendly: '◊ó◊ë◊®◊ï◊™◊ô',
    energetic: '◊ê◊†◊®◊í◊ò◊ô',
    social: '◊ó◊ë◊®◊™◊ô',
    aggressive: '◊™◊ï◊ß◊§◊†◊ô',
    description: '◊™◊ô◊ê◊ï◊®',
    vaccinated: '◊û◊ó◊ï◊°◊ü',
    medicalInfo: '◊û◊ô◊ì◊¢ ◊®◊§◊ï◊ê◊ô',
    addDog: '◊î◊ï◊°◊£ ◊õ◊ú◊ë',
    addPhoto: '◊î◊ï◊°◊£ ◊™◊û◊ï◊†◊î',
    basicInformation: '◊û◊ô◊ì◊¢ ◊ë◊°◊ô◊°◊ô',
    characteristics: '◊û◊ê◊§◊ô◊ô◊†◊ô◊ù',
    activity: 'üìä ◊§◊¢◊ô◊ú◊ï◊™',
    myBadges: '◊î◊™◊í◊ô◊ù ◊©◊ú◊ô',
    badgesEarned: '5 ◊™◊í◊ô◊ù ◊†◊®◊õ◊©◊ï',
    myStatistics: '◊î◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™ ◊©◊ú◊ô',
    viewYourData: '◊¶◊§◊î ◊ë◊†◊™◊ï◊†◊ô◊ù ◊©◊ú◊ö',
    visitLog: '◊ô◊ï◊û◊ü ◊î◊ë◊ô◊ß◊ï◊®◊ô◊ù',
    visitHistory: '◊î◊ô◊°◊ò◊ï◊®◊ô◊ô◊™ ◊î◊ë◊ô◊ß◊ï◊®◊ô◊ù',
    points: '◊†◊ß◊ï◊ì◊ï◊™',
    level: '◊®◊û◊î',
    streak: '◊®◊¶◊£',
    
    // Auth Screens
    loginTitle: '◊î◊™◊ó◊ë◊®◊ï◊™ ◊ú◊ó◊©◊ë◊ï◊ü',
    welcomeBack: '◊ë◊®◊ï◊ö ◊î◊©◊ë! ◊ê◊†◊ï ◊©◊û◊ó◊ô◊ù ◊ú◊®◊ê◊ï◊™◊ö ◊©◊ï◊ë',
    emailAddress: '◊õ◊™◊ï◊ë◊™ ◊ê◊ô◊û◊ô◊ô◊ú',
    enterEmail: '◊î◊õ◊†◊° ◊õ◊™◊ï◊ë◊™ ◊ê◊ô◊û◊ô◊ô◊ú',
    password: '◊°◊ô◊°◊û◊î',
    enterPassword: '◊î◊õ◊†◊° ◊°◊ô◊°◊û◊î',
    forgotPassword: '◊©◊õ◊ó◊™ ◊°◊ô◊°◊û◊î?',
    login: '◊î◊™◊ó◊ë◊®',
    or: '◊ê◊ï',
    continueWithGoogle: '◊î◊û◊©◊ö ◊¢◊ù Google',
    noAccount: '◊ê◊ô◊ü ◊ú◊ö ◊ó◊©◊ë◊ï◊ü? ',
    signUpNow: '◊î◊ô◊®◊©◊ù ◊¢◊õ◊©◊ô◊ï',
    registerTitle: '◊ô◊¶◊ô◊®◊™ ◊ó◊©◊ë◊ï◊ü ◊ó◊ì◊©',
    joinCommunity: '◊î◊¶◊ò◊®◊£ ◊ú◊ß◊î◊ô◊ú◊™ ◊ë◊¢◊ú◊ô ◊î◊õ◊ú◊ë◊ô◊ù ◊©◊ú◊†◊ï',
    firstName: '◊©◊ù ◊§◊®◊ò◊ô',
    lastName: '◊©◊ù ◊û◊©◊§◊ó◊î',
    confirmPassword: '◊ê◊ô◊û◊ï◊™ ◊°◊ô◊°◊û◊î',
    createAccount: '◊¶◊ï◊® ◊ó◊©◊ë◊ï◊ü',
    signUpWithGoogle: '◊î◊ô◊®◊©◊ù ◊¢◊ù Google',
    alreadyHaveAccount: '◊ô◊© ◊ú◊ö ◊õ◊ë◊® ◊ó◊©◊ë◊ï◊ü? ',
    loginText: '◊î◊™◊ó◊ë◊®',
    termsAgreement: '◊ë◊î◊®◊©◊û◊î ◊ê◊™◊î ◊û◊°◊õ◊ô◊ù ◊ú◊™◊†◊ê◊ô ◊î◊©◊ô◊û◊ï◊© ◊ï◊ú◊û◊ì◊ô◊†◊ô◊ï◊™ ◊î◊§◊®◊ò◊ô◊ï◊™ ◊©◊ú◊†◊ï',
    
    // Home Screen
    hello: '◊©◊ú◊ï◊ù',
    helloGuest: '◊©◊ú◊ï◊ù ◊ê◊ï◊®◊ó! üëã',
    discoverParks: '◊í◊ú◊î ◊í◊†◊ô ◊õ◊ú◊ë◊ô◊ù ◊ë◊°◊ë◊ô◊ë◊™◊ö',
    howCanWeHelpToday: '◊ê◊ô◊ö ◊†◊¢◊ñ◊ï◊® ◊ú◊ö ◊î◊ô◊ï◊ù?',
    signUpNow2: '◊î◊ô◊®◊©◊ù ◊¢◊õ◊©◊ô◊ï!',
    getAccessToAllFeatures: '◊ß◊ë◊ú ◊í◊ô◊©◊î ◊ú◊õ◊ú ◊î◊™◊õ◊ï◊†◊ï◊™: ◊¶◊≥◊ß-◊ê◊ô◊ü ◊ë◊í◊†◊ô◊ù, ◊ó◊ë◊®◊ï◊™, ◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊ï◊¢◊ï◊ì',
    whatCanYouDo: '◊û◊î ◊ê◊§◊©◊® ◊ú◊¢◊©◊ï◊™?',
    findParks: '◊û◊¶◊ê ◊í◊†◊ô◊ù',
    discoverDogParks: '◊í◊ú◊î ◊í◊†◊ô ◊õ◊ú◊ë◊ô◊ù ◊ë◊°◊ë◊ô◊ë◊î',
    parkInfo: '◊û◊ô◊ì◊¢ ◊¢◊ú ◊í◊†◊ô◊ù',
    hoursAndFacilities: '◊©◊¢◊ï◊™ ◊§◊™◊ô◊ó◊î ◊ï◊û◊™◊ß◊†◊ô◊ù',
    popularParks: '◊í◊†◊ô◊ù ◊§◊ï◊§◊ï◊ú◊®◊ô◊ô◊ù',
    openNow: '◊§◊™◊ï◊ó ◊¢◊õ◊©◊ô◊ï',
    dailyMissions: '◊û◊©◊ô◊û◊ï◊™ ◊ô◊ï◊û◊ô◊ï◊™ ‚≠ê',
    visitDogPark: '◊ë◊ß◊® ◊ë◊í◊ü ◊õ◊ú◊ë◊ô◊ù',
    completed: '◊î◊ï◊©◊ú◊ù',
    quickActions: '◊§◊¢◊ï◊ú◊ï◊™ ◊û◊î◊ô◊®◊ï◊™',
    quickCheckIn: '◊¶◊≥◊ß-◊ê◊ô◊ü ◊û◊î◊ô◊®',
    scanQrInPark: '◊°◊®◊ï◊ß QR ◊ë◊í◊ü',
    nearbyParks: '◊í◊†◊ô◊ù ◊ß◊®◊ï◊ë◊ô◊ù',
    findParksNearby: '◊û◊¶◊ê ◊í◊†◊ô◊ù ◊ë◊°◊ë◊ô◊ë◊î',
    
    // Language Selection
    selectLanguage: '◊ë◊ó◊® ◊©◊§◊î',
    english: 'English üá∫üá∏',
    hebrew: '◊¢◊ë◊®◊ô◊™ üáÆüá±',
    languageChanged: '◊î◊©◊§◊î ◊©◊ï◊†◊™◊î ◊ë◊î◊¶◊ú◊ó◊î',
    
    // Parks Screen
    dogParks: '◊í◊†◊ô ◊õ◊ú◊ë◊ô◊ù',
    searchParks: '◊ó◊§◊© ◊í◊†◊ô ◊õ◊ú◊ë◊ô◊ù...',
    all: '◊î◊õ◊ú',
    nearMe: '◊ß◊®◊ï◊ë ◊ê◊ú◊ô◊ô',
    openNow: '◊§◊™◊ï◊ó ◊¢◊õ◊©◊ô◊ï',
    highRating: '◊ì◊ô◊®◊ï◊í ◊í◊ë◊ï◊î',
    loadingParks: '◊ò◊ï◊¢◊ü ◊í◊†◊ô◊ù...',
    checkIn: '◊¶◊≥◊ß-◊ê◊ô◊ü',
    navigate: '◊†◊ï◊ï◊ò',
    public: '◊¶◊ô◊ë◊ï◊®◊ô',
    private: '◊§◊®◊ò◊ô',
    km: '◊ß"◊û',
    signUpForCheckinAndMore: '◊î◊ô◊®◊©◊ù ◊ú◊¶◊≥◊ß-◊ê◊ô◊ü ◊ï◊™◊õ◊ï◊†◊ï◊™ ◊†◊ï◊°◊§◊ï◊™',
    noParkAvailable: '◊ê◊ô◊ü ◊í◊†◊ô ◊õ◊ú◊ë◊ô◊ù ◊ñ◊û◊ô◊†◊ô◊ù ◊õ◊®◊í◊¢',
    reviews: '◊ë◊ô◊ß◊ï◊®◊ï◊™',
    
    // Social Screen
    social: '◊ó◊ë◊®◊™◊ô',
    joinCommunity: '◊î◊¶◊ò◊®◊£ ◊ú◊ß◊î◊ô◊ú◊î',
    connectWithDogOwners: '◊ó◊ë◊® ◊ú◊ë◊¢◊ú◊ô ◊õ◊ú◊ë◊ô◊ù ◊ê◊ó◊®◊ô◊ù, ◊©◊™◊£ ◊ó◊ï◊ï◊ô◊ï◊™ ◊ï◊¶◊ï◊® ◊ó◊ë◊®◊ï◊ô◊ï◊™ ◊ó◊ì◊©◊ï◊™',
    signUpForSocialFeatures: '◊õ◊ì◊ô ◊ú◊í◊©◊™ ◊ú◊™◊õ◊ï◊†◊ï◊™ ◊î◊ó◊ë◊®◊™◊ô◊ï◊™, ◊ê◊†◊ê ◊î◊ô◊®◊©◊ù ◊ê◊ï ◊î◊™◊ó◊ë◊® ◊ú◊ó◊©◊ë◊ï◊ü',
    activeFriends: '◊ó◊ë◊®◊ô◊ù ◊§◊¢◊ô◊ú◊ô◊ù',
    recentChats: '◊¶◊≥◊ê◊ò◊ô◊ù ◊ê◊ó◊®◊ï◊†◊ô◊ù',
    friend: '◊ó◊ë◊®',
    dogOwner: '◊ë◊¢◊ú ◊õ◊ú◊ë',
    community: '◊ß◊î◊ô◊ú◊î',
    sharePhoto: '◊©◊™◊£ ◊™◊û◊ï◊†◊î',
    uploadDogPhoto: '◊î◊¢◊ú◊î ◊™◊û◊ï◊†◊î ◊©◊ú ◊î◊õ◊ú◊ë ◊©◊ú◊ö',
    rateDogs: '◊ì◊®◊í ◊õ◊ú◊ë◊ô◊ù',
    rateDogsYouMet: '◊ì◊®◊í ◊õ◊ú◊ë◊ô◊ù ◊©◊§◊í◊©◊™ ◊ë◊í◊ü',
    dogDiary: '◊ô◊ï◊û◊ü ◊õ◊ú◊ë◊ô◊ù',
    recordMeetingsAndExperiences: '◊™◊¢◊ì ◊û◊§◊í◊©◊ô◊ù ◊ï◊ó◊ï◊ï◊ô◊ï◊™',
    registrationRequired: '◊†◊ì◊®◊©◊™ ◊î◊®◊©◊û◊î',
    signUpForSocial: '◊î◊ô◊®◊©◊ù ◊¢◊õ◊©◊ô◊ï',
    hours: '◊©◊≥',
    howIsYourDog: '◊î◊ô◊ô! ◊ê◊ô◊ö ◊î◊õ◊ú◊ë ◊©◊ú◊ö?',
    
    // Events Screen
    events: '◊ê◊ô◊®◊ï◊¢◊ô◊ù',
    discoverExcitingEvents: '◊í◊ú◊î ◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊û◊®◊í◊©◊ô◊ù',
    joinEventsAndMeetOthers: '◊î◊¶◊ò◊®◊£ ◊ú◊ê◊ô◊®◊ï◊¢◊ô◊ù, ◊§◊í◊© ◊ë◊¢◊ú◊ô ◊õ◊ú◊ë◊ô◊ù ◊ê◊ó◊®◊ô◊ù ◊ï◊¶◊ï◊® ◊ó◊ï◊ï◊ô◊ï◊™ ◊ë◊ú◊™◊ô ◊†◊©◊õ◊ó◊ï◊™',
    filterEvents: '◊°◊†◊ü ◊ê◊ô◊®◊ï◊¢◊ô◊ù',
    upcoming: '◊ß◊®◊ï◊ë◊ô◊ù',
    myEvents: '◊î◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊©◊ú◊ô',
    participants: '◊û◊©◊™◊™◊§◊ô◊ù',
    organized: '◊ê◊®◊í◊†◊™',
    availableEvents: '◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊ñ◊û◊ô◊†◊ô◊ù',
    eventIsFull: '◊î◊ê◊ô◊®◊ï◊¢ ◊û◊ú◊ê',
    signUpToEvent: '◊î◊ô◊®◊©◊ù ◊ú◊ê◊ô◊®◊ï◊¢',
    joinNow: '◊î◊¶◊ò◊®◊£ ◊¢◊õ◊©◊ô◊ï',
    date: '◊™◊ê◊®◊ô◊ö',
    location: '◊û◊ô◊ß◊ï◊ù',
    time: '◊©◊¢◊î',
    organizer: '◊û◊ê◊®◊í◊ü',
    participationLevel: '◊®◊û◊™ ◊î◊™◊û◊ú◊ê◊ï◊™',
    full: '◊û◊ú◊ê',
    available: '◊ñ◊û◊ô◊ü',
    signUpForEvents: '◊õ◊ì◊ô ◊ú◊î◊ô◊®◊©◊ù ◊ú◊ê◊ô◊®◊ï◊¢◊ô◊ù, ◊ê◊†◊ê ◊î◊ô◊®◊©◊ù ◊ê◊ï ◊î◊™◊ó◊ë◊® ◊ú◊ó◊©◊ë◊ï◊ü',
    
    // Tab Navigation
    homeTab: '◊ë◊ô◊™',
    parksTab: '◊í◊†◊ô◊ù',
    socialTab: '◊ó◊ë◊®◊™◊ô',
    eventsTab: '◊ê◊ô◊®◊ï◊¢◊ô◊ù',
    profileTab: '◊§◊®◊ï◊§◊ô◊ú',
    
    // Garden Details
    details: '◊§◊®◊ò◊ô◊ù',
    address: '◊õ◊™◊ï◊ë◊™',
    hoursToday: '◊©◊¢◊ï◊™ ◊§◊™◊ô◊ó◊î ◊î◊ô◊ï◊ù',
    facilities: '◊û◊™◊ß◊†◊ô◊ù',
    parking: '◊ó◊†◊ô◊î',
    water: '◊û◊ô◊ù',
    shade: '◊¶◊ú',
    lighting: '◊™◊ê◊ï◊®◊î',
    fencing: '◊í◊ô◊ì◊ï◊®',
    wasteDisposal: '◊§◊ô◊†◊ï◊ô ◊§◊°◊ï◊ú◊™',
    seating: '◊ô◊©◊ô◊ë◊î',
    agilityEquipment: '◊û◊õ◊©◊ô◊®◊ô ◊õ◊ï◊©◊®',
    currentVisitors: '◊û◊ë◊ß◊®◊ô◊ù ◊õ◊¢◊™',
    dogsCurrentlyActive: '◊õ◊ú◊ë◊ô◊ù ◊§◊¢◊ô◊ú◊ô◊ù ◊ë◊í◊ü ◊õ◊¢◊™',
    hoursNotAvailable: '◊©◊¢◊ï◊™ ◊ú◊ê ◊ñ◊û◊ô◊†◊ï◊™',
    addressNotAvailable: '◊õ◊™◊ï◊ë◊™ ◊ú◊ê ◊ñ◊û◊ô◊†◊î',
    closedToday: '◊°◊í◊ï◊® ◊î◊ô◊ï◊ù',
    
    // Status
    openNowStatus: '◊§◊™◊ï◊ó ◊¢◊õ◊©◊ô◊ï',
    closedNowStatus: '◊°◊í◊ï◊® ◊¢◊õ◊©◊ô◊ï',
    unknown: '◊ú◊ê ◊ñ◊û◊ô◊ü',
    
    // Notifications
    notifications: '◊î◊™◊®◊ê◊ï◊™',
    newMessages: '◊î◊ï◊ì◊¢◊ï◊™ ◊ó◊ì◊©◊ï◊™',
    markAllAsRead: '◊°◊û◊ü ◊î◊õ◊ú ◊õ◊†◊ß◊®◊ê',
    viewAll: '◊¶◊§◊î ◊ë◊î◊õ◊ú',
    noNotifications: '◊ê◊ô◊ü ◊î◊™◊®◊ê◊ï◊™',
    allNotificationsWillAppearHere: '◊õ◊ú ◊î◊î◊™◊®◊ê◊ï◊™ ◊©◊ú◊ö ◊ô◊ï◊§◊ô◊¢◊ï ◊õ◊ê◊ü',
    goToFullNotificationsPage: '◊¢◊ë◊ï◊® ◊ú◊ì◊£ ◊î◊™◊®◊ê◊ï◊™ ◊û◊ú◊ê',
    ago: '◊ú◊§◊†◊ô',
    newEvent: '◊ê◊ô◊®◊ï◊¢ ◊ó◊ì◊© ◊ë◊í◊ü',
    newFriend: '◊ó◊ë◊® ◊ó◊ì◊©',
    newAchievement: '◊î◊ô◊©◊í ◊ó◊ì◊©! üèÜ',
    reminder: '◊™◊ñ◊õ◊ï◊®◊™: ◊ë◊ì◊ô◊ß◊î ◊ï◊ò◊®◊ô◊†◊®◊ô◊™',
    
    // Navigation
    selectNavigationApp: '◊ë◊ó◊® ◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊†◊ô◊ï◊ï◊ò',
    openWith: '◊ë◊ó◊® ◊ê◊™ ◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊î◊†◊ô◊ï◊ï◊ò ◊î◊û◊ï◊¢◊ì◊§◊™ ◊¢◊ú◊ô◊ö',
    appleMaps: '◊û◊§◊ï◊™ ◊ê◊§◊ú',
    googleMaps: '◊í◊ï◊í◊ú ◊û◊§◊ï◊™',
    waze: '◊ï◊ï◊ô◊ô◊ñ',
    navigationNotAvailable: '◊†◊ô◊ï◊ï◊ò ◊ú◊ê ◊ñ◊û◊ô◊ü',
    errorOpeningNavigation: '◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊§◊™◊ï◊ó ◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊†◊ô◊ï◊ï◊ò. ◊ê◊†◊ê ◊†◊°◊î ◊©◊ï◊ë.',
    installNavigationApp: '◊î◊™◊ß◊ü ◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ô◊™ ◊†◊ô◊ï◊ï◊ò',
    noNavigationAppsFound: '◊ú◊ê ◊†◊û◊¶◊ê◊ï ◊ê◊§◊ú◊ô◊ß◊¶◊ô◊ï◊™ ◊†◊ô◊ï◊ï◊ò ◊ë◊û◊õ◊©◊ô◊®',
    openInBrowser: '◊§◊™◊ó ◊ë◊ì◊§◊ì◊§◊ü',

    // QR Scanner
    scanQR: '◊°◊®◊ï◊ß QR',
    scanQrToCheckin: '◊°◊®◊ï◊ß QR ◊õ◊ì◊ô ◊ú◊ë◊¶◊¢ ◊¶\'◊ß-◊ê◊ô◊ü',
    scanning: '◊°◊ï◊®◊ß...',
    scanQrInPark: '◊°◊®◊ï◊ß QR ◊ë◊í◊ü',
    quickCheckin: '◊¶\'◊ß-◊ê◊ô◊ü ◊û◊î◊ô◊®',
    positionQrWithinFrame: '◊û◊ß◊ù ◊ê◊™ ◊ß◊ï◊ì ◊î-QR ◊ë◊û◊°◊í◊®◊™',
    qrScanAutomatically: '◊î◊ß◊ï◊ì ◊ô◊ô◊°◊®◊ß ◊ë◊ê◊ï◊§◊ü ◊ê◊ï◊ò◊ï◊û◊ò◊ô',
    manualCheckin: '◊¶\'◊ß-◊ê◊ô◊ü ◊ô◊ì◊†◊ô',
    cameraPermissionRequired: '◊†◊ì◊®◊©◊™ ◊í◊ô◊©◊î ◊ú◊û◊¶◊ú◊û◊î',
    cameraPermissionMessage: '◊õ◊ì◊ô ◊ú◊°◊®◊ï◊ß ◊ß◊ï◊ì◊ô QR, ◊ê◊†◊ó◊†◊ï ◊¶◊®◊ô◊õ◊ô◊ù ◊í◊ô◊©◊î ◊ú◊û◊¶◊ú◊û◊î ◊©◊ú◊ö',
    grantPermission: '◊ê◊§◊©◊® ◊í◊ô◊©◊î',
    goBack: '◊ó◊ñ◊ï◊®',
    processing: '◊û◊¢◊ë◊ì...',
    invalidQrCode: 'QR ◊ú◊ê ◊™◊ß◊ô◊ü',
    invalidQrMessage: '◊ß◊ï◊ì ◊î-QR ◊ê◊ô◊†◊ï ◊™◊ß◊ô◊ü ◊¢◊ë◊ï◊® ◊í◊ü ◊õ◊ú◊ë◊ô◊ù',
    scanAgain: '◊°◊®◊ï◊ß ◊©◊ï◊ë',
    checkinSuccessful: '◊¶\'◊ß-◊ê◊ô◊ü ◊ë◊ï◊¶◊¢ ◊ë◊î◊¶◊ú◊ó◊î!',
  },
};

interface LanguageContextType {
  language: Language;
  t: Translations;
  textDirection: TextDirection;
  isRTL: boolean;
  changeLanguage: (lang: Language) => void;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

interface LanguageProviderProps {
  children: React.ReactNode;
}

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [language, setLanguage] = useState<Language>('en'); // Default to English
  
  useEffect(() => {
    loadLanguage();
  }, []);

  const loadLanguage = async () => {
    try {
      const savedLanguage = await SecureStore.getItemAsync('language');
      if (savedLanguage === 'he' || savedLanguage === 'en') {
        setLanguage(savedLanguage);
        // Update RTL for Hebrew
        if (savedLanguage === 'he') {
          I18nManager.forceRTL(true);
        } else {
          I18nManager.forceRTL(false);
        }
      }
    } catch (error) {
      console.error('Error loading language:', error);
    }
  };

  const changeLanguage = async (lang: Language) => {
    try {
      setLanguage(lang);
      await SecureStore.setItemAsync('language', lang);
      
      // Update RTL setting
      const shouldUseRTL = lang === 'he';
      I18nManager.forceRTL(shouldUseRTL);
      
      // Note: In a real app, you might want to restart the app here
      // to ensure RTL changes take full effect
    } catch (error) {
      console.error('Error saving language:', error);
    }
  };

  const textDirection: TextDirection = language === 'he' ? 'rtl' : 'ltr';
  const isRTL = language === 'he';
  const t = translations[language];

  return (
    <LanguageContext.Provider value={{ 
      language, 
      t, 
      textDirection, 
      isRTL, 
      changeLanguage 
    }}>
      {children}
    </LanguageContext.Provider>
  );
};